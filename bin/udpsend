#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) UDP unicast / broadcast / multicast sender for network testing. Version 2.2.2.20220417
"""UDP unicast / broadcast / multicast sender for network testing.

Example:
    # Send message 'hello unicast' to 127.0.0.1:41214.
    udpsend -a 127.0.0.1 -p 41214 'hello unicast'

    # You can specify a IPv6 address.
    udpsend -a ::1 -p 41214 'hello IPv6'

    # You can specify a FQDN.
    udpsend -a echo.example.org -p 41214 'hello FQDN'

    # You can send a broadcast packet.
    udpsend -a 192.0.2.255 -p 41214 'hello broadcast'
    udpsend -a 255.255.255.255 -p 41214 'hello broadcast'

    # You can send a multicast packet.
    # In the following example:
    # - 239.192.0.1 is IP multicast group address.
    # - 192.0.2.11 is your computer's network interface.
    udpsend -a 239.192.0.1 -m 192.0.2.11 -p 41214 'hello multidcast'
"""

import argparse
import ipaddress
import socket
import sys


def eprint(*args, **keywords):
    """Wrapper function of print() (for error messages).

    Args:
        *args (tuple): Variable length argument list.
        **keywords (dict[str, Any]): Arbitrary keyword arguments.
    """
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def udpsend(addr, port, sockopt, msg):
    """Main routine of UDP packet sender.

    Args:
        addr (str): Target address.
        port (int): Target port number.
        sockopt (tuple[int, int, Union[bytes, int]]): Socket option.
        msg (bytes): Send message.
    """
    for ai in socket.getaddrinfo(addr, port, socket.AF_UNSPEC,
                                 socket.SOCK_DGRAM):
        family, socktype, protocol, _, sockaddr = ai
        try:
            with socket.socket(family, socktype, protocol) as sock:
                sock.setsockopt(*sockopt)
                sock.sendto(msg, sockaddr)
        except OSError:
            continue
        return
    raise ValueError('could not open socket or send packet')


def select_sockopt(addr, mcast_if):
    """Select socket option parameter.

    Args:
        addr (str): Target address.
        mcast_if (Union[str, None]): IP multicast interface.

    Returns:
        tuple[int, int, Union[bytes, int]]: Socket option.
    """
    try:
        ipaddr = ipaddress.ip_address(addr)
    except:
        ipaddr = None

    if ipaddr is None or not ipaddr.is_multicast:
        return (socket.SOL_SOCKET,
                socket.SO_BROADCAST,
                1)
    elif mcast_if is None:
        raise ValueError('the following arguments are required: -m/--multicast-if')
    elif ipaddr.version == 4:
        return (socket.IPPROTO_IP,
                socket.IP_MULTICAST_IF,
                socket.inet_aton(mcast_if))
    elif ipaddr.version == 6:
        return (socket.IPPROTO_IPV6,
                socket.IPV6_MULTICAST_IF,
                int(mcast_if))
    else:
        raise ValueError('must not happen')


def parse_args():
    """Parse CLI arguments.

    Returns:
        tuple[argparse.Namespace, list[str]]: Results of argument parsing.
    """
    parser = argparse.ArgumentParser(description=
            'UDP unicast / broadcast / multicast sender for network testing')

    parser.add_argument('messages', metavar='message', nargs='*',
                        help='messages to send')
    parser.add_argument('-a', '--addr', metavar='addr', nargs=1,
                        required=True, help='target address')
    parser.add_argument('-m', '--multicast-if', metavar='multicast_if', nargs=1,
                        help=('the outgoing network interface for sending multicast traffic'
                              ' (IPv4: IP address, IPv6: index number)'))
    parser.add_argument('-p', '--port', metavar='port', nargs=1, type=int,
                        required=True, help='target port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 2.2.2')

    return parser.parse_known_args()


def main():
    """Main routine function.
    """
    args = parse_args()

    addr = args[0].addr[0]
    mcif = args[0].multicast_if[0] if args[0].multicast_if else None
    port = args[0].port[0]
    msgs = args[0].messages

    retval = 0

    if len(msgs) > 0:
        try:
            sockopt = select_sockopt(addr, mcif)
            udpsend(addr, port, sockopt, '\n'.join(msgs).encode())
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)


if __name__ == '__main__':
    main()
