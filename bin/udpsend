#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) UDP unicast / broadcast / multicast sender for network testing. Version 2.2.1.20190214

import argparse
import ipaddress
import socket
import sys


def eprint(*args, **keywords):
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def udpsend(addr, port, sockopt, msg):
    for ai in socket.getaddrinfo(addr, port, socket.AF_UNSPEC,
                                 socket.SOCK_DGRAM):
        family, socktype, protocol, canonname, sockaddr = ai
        try:
            with socket.socket(family, socktype, protocol) as sock:
                sock.setsockopt(*sockopt)
                sock.sendto(msg, sockaddr)
        except OSError:
            continue
        return
    raise ValueError('could not open socket or send packet')


def select_sockopt(addr, mcast_if):
    try:
        ipaddr = ipaddress.ip_address(addr)
    except:
        ipaddr = None

    if ipaddr is None or not ipaddr.is_multicast:
        return (socket.SOL_SOCKET,
                socket.SO_BROADCAST,
                1)
    elif mcast_if is None:
        raise ValueError('the following arguments are required: -m/--multicast-if')
    elif ipaddr.version == 4:
        return (socket.IPPROTO_IP,
                socket.IP_MULTICAST_IF,
                socket.inet_aton(mcast_if))
    elif ipaddr.version == 6:
        return (socket.IPPROTO_IPV6,
                socket.IPV6_MULTICAST_IF,
                int(mcast_if))
    else:
        raise ValueError('must not happen')


def parse_args():
    parser = argparse.ArgumentParser(description=
            'UDP unicast / broadcast / multicast sender for network testing')

    parser.add_argument('messages', metavar='message', nargs='*',
                        help='messages to send')
    parser.add_argument('-a', '--addr', metavar='addr', nargs=1,
                        required=True, help='target address')
    parser.add_argument('-m', '--multicast-if', metavar='multicast_if', nargs=1,
                        help=('the outgoing network interface for sending multicast traffic'
                              ' (IPv4: IP address, IPv6: index number)'))
    parser.add_argument('-p', '--port', metavar='port', nargs=1, type=int,
                        required=True, help='target port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 2.2.1')

    return parser.parse_known_args()


def main():
    args = parse_args()

    addr = args[0].addr[0]
    mcif = args[0].multicast_if[0] if args[0].multicast_if else None
    port = args[0].port[0]
    msgs = args[0].messages

    retval = 0

    if len(msgs) > 0:
        try:
            sockopt = select_sockopt(addr, mcif)
            udpsend(addr, port, sockopt, '\n'.join(msgs).encode())
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main()
