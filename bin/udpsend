#!/usr/bin/env python
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) UDP sender for network testing. Version 1.1.0.20170406

from __future__ import print_function

import argparse
import socket
import sys


def eprint(*args, **keywords):
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def udpsend(addr, port, msg):
    for ai in socket.getaddrinfo(addr, port, socket.AF_UNSPEC,
                                 socket.SOCK_DGRAM):
        family, socktype, protocol, canonname, sockaddr = ai
        try:
            sock = socket.socket(family, socktype, protocol)
        except socket.error:
            continue
        sock.sendto(msg, sockaddr)
        sock.close()
        return
    raise ValueError('could not open socket')


def parse_args():
    parser = argparse.ArgumentParser(description=
            'UDP sender for network testing')

    parser.add_argument('messages', metavar='message', nargs='*',
                        help='messages to send')
    parser.add_argument('-a', '--addr', metavar='addr', nargs='?',
                        required=True, help='target address')
    parser.add_argument('-p', '--port', metavar='port', nargs='?', type=int,
                        required=True, help='target port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.1.0')

    return parser.parse_known_args()


def main():
    args = parse_args()

    addr = args[0].addr
    port = args[0].port
    msgs = args[0].messages

    if addr is None:
        eprint('error: need target address')
        sys.exit(1)

    if port is None:
        eprint('error: need target port')
        sys.exit(1)

    retval = 0

    if len(msgs) > 0:
        try:
            udpsend(addr, port, '\n'.join(msgs))
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main()
