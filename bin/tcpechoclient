#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) TCP echo client for network testing. Version 1.0.1.20190221

import argparse
import socket
import sys


MIN_TIMEOUT_SEC = 0.1
DEFAULT_TIMEOUT_SEC = 1.0


def eprint(*args, **keywords):
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def tcp_echo_client(addr, port, msg, timeout, ostream):
    with socket.create_connection((addr, port), timeout) as sock:
        sock.sendall(msg)
        data = sock.recv(len(msg) * 2 + 1)
        sock.shutdown(socket.SHUT_RDWR)
        print('response:', repr(data), file=ostream)


def parse_args():
    parser = argparse.ArgumentParser(description=
            'TCP echo client for network testing')

    parser.add_argument('messages', metavar='message', nargs='*',
                        help='messages to send')
    parser.add_argument('-a', '--addr', metavar='addr', nargs=1,
                        required=True, help='target address')
    parser.add_argument('-o', '--output', metavar='file', nargs=1,
                        type=argparse.FileType('w'), default=[sys.stdout],
                        help='place output in file')
    parser.add_argument('-p', '--port', metavar='port', nargs=1, type=int,
                        required=True, help='target port')
    parser.add_argument('-t', '--timeout', metavar='timeout', nargs=1, type=float,
                        default=[DEFAULT_TIMEOUT_SEC],
                        help='connection timeout in seconds')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.0.1')

    return parser.parse_known_args()


def main():
    args = parse_args()

    addr = args[0].addr[0]
    port = args[0].port[0]
    msgs = args[0].messages
    timeout = args[0].timeout[0]

    if timeout < MIN_TIMEOUT_SEC:
        timeout = MIN_TIMEOUT_SEC

    retval = 0

    if len(msgs) > 0:
        try:
            tcp_echo_client(addr, port, '\n'.join(msgs).encode(), timeout,
                            args[0].output[0])
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main()
