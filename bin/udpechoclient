#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) UDP unicast echo client for network testing. Version 1.0.3.20220420
"""UDP unicast echo client for network testing.

Example:
    # Send message 'hello' to the echo server at 127.0.0.1:41214.
    udpechoclient -a 127.0.0.1 -p 41214 hello

    # You can specify a IPv6 address.
    udpechoclient -a ::1 -p 41214 'hello IPv6'

    # You can specify a FQDN.
    udpechoclient -a echo.example.org -p 41214 'hello FQDN'
"""

from __future__ import annotations

import argparse
import os
import socket
import sys

from typing import Any, Final, NoReturn, TextIO

progname: Final[str] = os.path.basename(sys.argv[0])


def eprint(*args: Any, **keywords: Any) -> None:
    """Wrapper function of print() (for error messages).

    Args:
        *args (tuple): Variable length argument list.
        **keywords (dict[str, Any]): Arbitrary keyword arguments.
    """
    print(progname + ':', *args, file=sys.stderr, **keywords)


def udpechoclient(addr: str, port: int, msg: bytes, ostream: TextIO) -> None:
    """Main routine of UDP echo client.

    Args:
        addr (str): Server address.
        port (int): Server port number.
        msg (bytes): Echo message.
        ostream (TextIO): Output text IO stream.
    """
    for ai in socket.getaddrinfo(addr, port, socket.AF_UNSPEC,
                                 socket.SOCK_DGRAM):
        family, socktype, protocol, _, sockaddr = ai
        try:
            with socket.socket(family, socktype, protocol) as sock:
                sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
                print('send to', sockaddr[0], 'port', sockaddr[1], ':',
                      repr(msg), file=ostream)
                sock.sendto(msg, sockaddr)

                # Workaround to handle keyboard interrupt on Windows.
                sock.settimeout(0.05)

                while True:
                    try:
                        data, addr_from = sock.recvfrom(65535)
                    except socket.timeout:
                        continue
                    if addr_from != sockaddr:
                        continue
                    print('receive from', addr_from[0], 'port', addr_from[1],
                          ':', repr(data), file=ostream)
                    ostream.flush()
                    break
        except OSError:
            continue
        except KeyboardInterrupt:
            pass
        return
    raise ValueError('could not open socket or send packet')


def parse_args() -> tuple[argparse.Namespace, list[str]]:
    """Parse CLI arguments.

    Returns:
        tuple[argparse.Namespace, list[str]]: Results of argument parsing.
    """
    parser = argparse.ArgumentParser(description=
            'UDP unicast echo client for network testing')

    parser.add_argument('messages', metavar='message', nargs='*',
                        help='messages to send')
    parser.add_argument('-a', '--addr', metavar='addr', nargs=1,
                        required=True, help='target address')
    parser.add_argument('-o', '--output', metavar='file', nargs=1,
                        type=argparse.FileType('w'), default=[sys.stdout],
                        help='place output in file')
    parser.add_argument('-p', '--port', metavar='port', nargs=1, type=int,
                        required=True, help='target port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.0.3')

    return parser.parse_known_args()


def main() -> NoReturn:
    """Main routine function.
    """
    args = parse_args()

    msgs = args[0].messages

    retval = 0

    if len(msgs) > 0:
        try:
            udpechoclient(args[0].addr[0], args[0].port[0],
                          '\n'.join(msgs).encode(), args[0].output[0])
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)


if __name__ == '__main__':
    main()
