#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) TCP echo server for network testing. Version 1.0.3.20220417
"""TCP echo server for network testing.

Example:
    # Start server at 0.0.0.0:41214.
    tcpechoserver -p 41214

    # You can specify a network interface by IP address.
    tcpechoserver -a 127.0.0.1 -p 41214

    # You can specify a IPv6 address.
    tcpechoserver -a ::1 -p 41214
"""

import argparse
import os
import socket
import sys

progname = os.path.basename(sys.argv[0])


def eprint(*args, **keywords):
    """Wrapper function of print() (for error messages).

    Args:
        *args (tuple): Variable length argument list.
        **keywords (dict[str, Any]): Arbitrary keyword arguments.
    """
    print(progname + ':', *args, file=sys.stderr, **keywords)


def tcp_echo_server(bind_addr, bind_port, ostream):
    """Main routine of TCP echo server.

    Args:
        bind_addr (str): Server bind IP address.
        bind_port (int): Server bind port number.
        ostream (TextIO): Output text IO stream.
    """
    for ai in socket.getaddrinfo(bind_addr, bind_port, socket.AF_UNSPEC,
                                 socket.SOCK_STREAM):
        family, socktype, protocol, _, sockaddr = ai
        try:
            with socket.socket(family, socktype, protocol) as sock:
                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                sock.bind(sockaddr)
                sock.listen()

                # Workaround to handle keyboard interrupt on Windows.
                sock.settimeout(0.05)

                print('listening on', sockaddr[0], 'port', sockaddr[1],
                      file=ostream)
                ostream.flush()

                while True:
                    try:
                        client, addr = sock.accept()
                    except socket.timeout:
                        continue
                    with client:
                        data = client.recv(65535)
                        print('receive from', addr[0], 'port', addr[1], ':',
                              repr(data), file=ostream)
                        ostream.flush()
                        client.send(data)
        except OSError:
            continue
        except KeyboardInterrupt:
            pass
        return
    raise ValueError('could not open socket')


def parse_args():
    """Parse CLI arguments.

    Returns:
        tuple[argparse.Namespace, list[str]]: Results of argument parsing.
    """
    parser = argparse.ArgumentParser(description=
            'TCP echo server for network testing')

    parser.add_argument('-a', '--bind-addr', metavar='addr', nargs=1,
                        default=['0.0.0.0'], help='bind address')
    parser.add_argument('-o', '--output', metavar='file', nargs=1,
                        type=argparse.FileType('w'), default=[sys.stdout],
                        help='place output in file')
    parser.add_argument('-p', '--bind-port', metavar='port', nargs=1, type=int,
                        required=True, help='bind port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.0.3')

    return parser.parse_known_args()


def main():
    """Main routine function.
    """
    args = parse_args()

    bind_addr = args[0].bind_addr[0]
    bind_port = args[0].bind_port[0]

    retval = 0

    try:
        tcp_echo_server(bind_addr, bind_port, args[0].output[0])
    except Exception as e:
        eprint(e)
        retval = 1

    sys.exit(retval)


if __name__ == '__main__':
    main()
