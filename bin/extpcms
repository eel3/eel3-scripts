#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) Command line tool to extract PCM data from multiple RIFF WAVE files. Version 1.0.1.20220417
"""Command line tool to extract PCM data from multiple RIFF WAVE files.

Example:
    $ ls
    sample_1.wav  sample_2.wav
    $ extpcms -o sample_1.bin sample_2.bin -- sample_1.wav sample_2.wav
    $ ls
    sample_1.bin  sample_1.wav  sample_2.bin  sample_2.wav
    $ _
"""

import argparse
import sys
import wave


def eprint(*args, **keywords):
    """Wrapper function of print() (for error messages).

    Args:
        *args (tuple): Variable length argument list.
        **keywords (dict[str, Any]): Arbitrary keyword arguments.
    """
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def extpcm(wavfile, ostream):
    """Extract PCM data from RIFF WAVE file.

    Args:
        wavfile (str): Target file name.
        ostream (BinaryIO): Output binary IO stream.
    """
    wr = wave.open(wavfile, 'rb')
    ostream.write(wr.readframes(wr.getnframes()))
    wr.close()


def parse_args():
    """Parse CLI arguments.

    Returns:
        tuple[argparse.Namespace, list[str]]: Results of argument parsing.
    """
    parser = argparse.ArgumentParser(description=
            'Command line tool to extract PCM data from multiple RIFF WAVE files.')

    parser.add_argument('files', metavar='file', nargs='+',
                        help="RIFF WAVE file")
    parser.add_argument('-o', '--output-files', metavar='file', nargs='+',
                        required=True, help="place output in file")
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.0.1')

    return parser.parse_known_args()


def main():
    """Main routine function.
    """
    args = parse_args()
    retval = 0

    infiles = args[0].files
    outfiles = args[0].output_files

    if len(infiles) != len(outfiles):
        eprint('error: The number of output files must be equal to the number of intput files')
        sys.exit(1)

    for infile, outfile in zip(infiles, outfiles):
        try:
            if outfile == '-':
                extpcm(infile, sys.stdout.buffer)
            else:
                with open(outfile, 'wb') as ostream:
                    extpcm(infile, ostream)
        except Exception as e:
            eprint(e)
            retval = 1

    sys.exit(retval)


if __name__ == '__main__':
    main()
