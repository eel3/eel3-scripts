#!/usr/bin/env python
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) Command line tool to dump RIFF WAVE file. Version 1.1.1.20170622

from __future__ import print_function

import argparse
import struct
import sys
import wave


def format_sample_big_endian(sample, sampwidth):
    return ('%02X' * sampwidth) % struct.unpack('%dB' % sampwidth, sample)


def format_sample_little_endian(sample, sampwidth):
    return ('%02X' * sampwidth) % struct.unpack('%dB' % sampwidth, sample[::-1])


def dumpwav(wavfile, ostream, opts):
    wr = wave.open(wavfile, 'rb')

    sampwidth = wr.getsampwidth()
    nchannels = wr.getnchannels()
    framewidth = sampwidth * nchannels
    nframes = wr.getnframes()

    ostream.write('sampling frequency\t%d\n' % wr.getframerate())
    ostream.write('bytes per sample\t%d\n' % sampwidth)
    ostream.write('bits per sample\t%d\n' % (sampwidth * 8))
    ostream.write('num of channels\t%d\n' % nchannels)
    ostream.write('bytes per frame\t%d\n' % framewidth)
    ostream.write('num of frames\t%d\n' % nframes)

    if opts.little_endian:
        format_sample = format_sample_little_endian
    else:
        format_sample = format_sample_big_endian

    frames = wr.readframes(nframes)
    it = (frames[i:i+framewidth] for i in range(0, len(frames), framewidth))
    for fn, frame in enumerate(it):
        samples = [format_sample(frame[i:i+sampwidth], sampwidth)
                for i in range(0, framewidth, sampwidth)]
        ostream.write('frame %d\t%s\n' % (fn, '\t'.join(samples)))

    wr.close()


def parse_args():
    parser = argparse.ArgumentParser(description=
            'Command line tool to dump RIFF WAVE file.')

    parser.add_argument('files', metavar='file', nargs='+',
                        help="RIFF WAVE file")
    parser.add_argument('-l', '--little-endian', action='store_true',
                        help='dump samples as little-endian')
    parser.add_argument('-o', '--output', metavar='file', nargs='?',
                        type=argparse.FileType('w'), const=sys.stdout,
                        default=sys.stdout, help="place output in file")
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 1.1.1')

    return parser.parse_known_args()


def main():
    args = parse_args()
    retval = 0

    for f in args[0].files:
        try:
            dumpwav(f, args[0].output, args[0])
        except Exception as e:
            print(e, file=sys.stderr)
            retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main();
