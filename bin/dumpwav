#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8-unix -*-
# vim:fileencoding=utf-8:ff=unix
# @(#) Command line tool to dump RIFF WAVE file. Version 2.0.2.20220420
"""Command line tool to dump RIFF WAVE file.

Example:
    $ # Dump samples as big-endian.
    $ dumpwav sample.wav | head -n 10
    sampling frequency	44100
    bytes per sample	2
    bits per sample	16
    num of channels	2
    bytes per frame	4
    num of frames	1000000
    frame 0	0000	0000
    frame 1	0202	0202
    frame 2	0204	0204
    frame 3	FF05	FF05
    $ _

    $ # Dump samples as little-endian.
    $ dumpwav -l sample.wav | head -n 10
    sampling frequency	44100
    bytes per sample	2
    bits per sample	16
    num of channels	2
    bytes per frame	4
    num of frames	1000000
    frame 0	0000	0000
    frame 1	0202	0202
    frame 2	0402	0402
    frame 3	05FF	05FF
    $ _
"""

from __future__ import annotations

import argparse
import struct
import sys
import wave

from typing import NoReturn, TextIO


def dumpwav(wavfile: str, ostream: TextIO, opts: argparse.Namespace) -> None:
    """Dump RIFF WAVE file.

    Args:
        wavfile (str): Target file name.
        ostream (TextIO): Output text IO stream.
        opts (argparse.Namespace): Option parameters.
    """
    def format_sample_big_endian(sample: bytes) -> str:
        """Format PCM sample as big-endian.

        Args:
            sample (bytes): PCM sample.

        Returns:
            str: Formatted string.
        """
        return print_fmt % struct.unpack(unpack_fmt, sample)

    def format_sample_little_endian(sample: bytes) -> str:
        """Format PCM sample as little-endian.

        Args:
            sample (bytes): PCM sample.

        Returns:
            str: Formatted string.
        """
        return format_sample_big_endian(sample[::-1])

    wr = wave.open(wavfile, 'rb')

    sampwidth = wr.getsampwidth()
    nchannels = wr.getnchannels()
    framewidth = sampwidth * nchannels
    nframes = wr.getnframes()

    ostream.write('sampling frequency\t%d\n' % wr.getframerate())
    ostream.write('bytes per sample\t%d\n' % sampwidth)
    ostream.write('bits per sample\t%d\n' % (sampwidth * 8))
    ostream.write('num of channels\t%d\n' % nchannels)
    ostream.write('bytes per frame\t%d\n' % framewidth)
    ostream.write('num of frames\t%d\n' % nframes)

    print_fmt = '%02X' * sampwidth
    unpack_fmt = '%dB' % sampwidth
    if opts.little_endian:
        format_sample = format_sample_little_endian
    else:
        format_sample = format_sample_big_endian

    frames = wr.readframes(nframes)
    it = (frames[i:i+framewidth] for i in range(0, len(frames), framewidth))
    for fn, frame in enumerate(it):
        samples = [format_sample(frame[i:i+sampwidth])
                for i in range(0, framewidth, sampwidth)]
        ostream.write('frame %d\t%s\n' % (fn, '\t'.join(samples)))

    wr.close()


def parse_args() -> tuple[argparse.Namespace, list[str]]:
    """Parse CLI arguments.

    Returns:
        tuple[argparse.Namespace, list[str]]: Results of argument parsing.
    """
    parser = argparse.ArgumentParser(description=
            'Command line tool to dump RIFF WAVE file.')

    parser.add_argument('files', metavar='file', nargs='+',
                        help="RIFF WAVE file")
    parser.add_argument('-l', '--little-endian', action='store_true',
                        help='dump samples as little-endian')
    parser.add_argument('-o', '--output', metavar='file', nargs=1,
                        type=argparse.FileType('w'), default=[sys.stdout],
                        help="place output in file")
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 2.0.2')

    return parser.parse_known_args()


def main() -> NoReturn:
    """Main routine function.
    """
    args = parse_args()
    retval = 0

    for f in args[0].files:
        try:
            dumpwav(f, args[0].output[0], args[0])
        except Exception as e:
            print(e, file=sys.stderr)
            retval = 1

    sys.exit(retval)


if __name__ == '__main__':
    main()
