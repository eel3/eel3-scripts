#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) UDP receiver for network testing. Version 2.0.1.20190118

import argparse
import socket
import sys


def eprint(*args, **keywords):
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def udprecv(bind_addr, bind_port, ostream):
    for ai in socket.getaddrinfo(bind_addr, bind_port, socket.AF_UNSPEC,
                                 socket.SOCK_DGRAM):
        family, socktype, protocol, canonname, sockaddr = ai
        try:
            with socket.socket(family, socktype, protocol) as sock:
                sock.bind(sockaddr)

                print('listening on', sockaddr[0], 'port', sockaddr[1],
                      file=ostream)
                ostream.flush()

                while True:
                    data, addr = sock.recvfrom(65535)
                    print('receive from', addr[0], 'port', addr[1], ':',
                          repr(data), file=ostream)
                    ostream.flush()
        except OSError:
            continue
        except KeyboardInterrupt:
            pass
        return
    raise ValueError('could not open socket')


def parse_args():
    DEFAULT_BIND_ADDR = '0.0.0.0'

    parser = argparse.ArgumentParser(description=
            'UDP receiver for network testing')

    parser.add_argument('-a', '--bind-addr', metavar='addr', nargs='?',
                        const=DEFAULT_BIND_ADDR, default=DEFAULT_BIND_ADDR,
                        help='bind address')
    parser.add_argument('-o', '--output', metavar='file', nargs='?',
                        type=argparse.FileType('w'), const=sys.stdout,
                        default=sys.stdout, help='place output in file')
    parser.add_argument('-p', '--bind-port', metavar='port', nargs='?', type=int,
                        required=True, help='bind port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 2.0.1')

    return parser.parse_known_args()


def main():
    args = parse_args()

    bind_port = args[0].bind_port

    if bind_port is None:
        eprint('error: need bind port')
        sys.exit(1)

    retval = 0

    try:
        udprecv(args[0].bind_addr, bind_port, args[0].output)
    except Exception as e:
        eprint(e)
        retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main()
