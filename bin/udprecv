#!/usr/bin/env python3
# encoding: utf-8
# -*- coding: utf-8 -*-
# vim:fileencoding=UTF-8
# @(#) UDP unicast / broadcast / multicast receiver for network testing. Version 2.1.1.20190215

import argparse
import ipaddress
import socket
import struct
import sys


def eprint(*args, **keywords):
    print(sys.argv[0] + ':', *args, file=sys.stderr, **keywords)


def udprecv(bind_addr, bind_port, sockopt, ostream):
    for ai in socket.getaddrinfo(bind_addr, bind_port, socket.AF_UNSPEC,
                                 socket.SOCK_DGRAM):
        family, socktype, protocol, canonname, sockaddr = ai
        try:
            with socket.socket(family, socktype, protocol) as sock:
                sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                sock.bind(sockaddr)
                if sockopt is not None:
                    sock.setsockopt(*sockopt)

                print('listening on', sockaddr[0], 'port', sockaddr[1],
                      file=ostream)
                ostream.flush()

                while True:
                    data, addr = sock.recvfrom(65535)
                    print('receive from', addr[0], 'port', addr[1], ':',
                          repr(data), file=ostream)
                    ostream.flush()
        except OSError:
            continue
        except KeyboardInterrupt:
            pass
        return
    raise ValueError('could not open socket')


def select_sockopt(addr, mcast_if):
    try:
        ipaddr = ipaddress.ip_address(addr)
    except:
        ipaddr = None

    if ipaddr is None or not ipaddr.is_multicast:
        return (addr, None)
    elif mcast_if is None:
        raise ValueError('the following arguments are required: -m/--multicast-if')
    elif ipaddr.version == 4:
        return ('0.0.0.0',
                (socket.IPPROTO_IP,
                 socket.IP_ADD_MEMBERSHIP,
                 struct.pack("4s4s", ipaddr.packed, socket.inet_aton(mcast_if))))
    elif ipaddr.version == 6:
        return ('::',
                (socket.IPPROTO_IPV6,
                 socket.IPV6_JOIN_GROUP,
                 struct.pack("16sI", ipaddr.packed, int(mcast_if))))
    else:
        raise ValueError('must not happen')


def parse_args():
    parser = argparse.ArgumentParser(description=
            'UDP unicast / broadcast / multicast receiver for network testing')

    parser.add_argument('-a', '--bind-addr', metavar='addr', nargs=1,
                        default=['0.0.0.0'], help='bind address')
    parser.add_argument('-m', '--multicast-if', metavar='multicast_if', nargs=1,
                        help=('the incoming network interface for receiving multicast traffic'
                              ' (IPv4: IP address, IPv6: index number)'))
    parser.add_argument('-o', '--output', metavar='file', nargs=1,
                        type=argparse.FileType('w'), default=[sys.stdout],
                        help='place output in file')
    parser.add_argument('-p', '--bind-port', metavar='port', nargs=1, type=int,
                        required=True, help='bind port')
    parser.add_argument('-v', '--version', action='version',
                        version='%(prog)s 2.1.1')

    return parser.parse_known_args()


def main():
    args = parse_args()

    bind_addr = args[0].bind_addr[0]
    mcast_if  = args[0].multicast_if[0] if args[0].multicast_if else None
    bind_port = args[0].bind_port[0]

    retval = 0

    try:
        bind_addr, sockopt = select_sockopt(bind_addr, mcast_if)
        udprecv(bind_addr, bind_port, sockopt, args[0].output[0])
    except Exception as e:
        eprint(e)
        retval = 1

    sys.exit(retval)

if __name__ == '__main__':
    main()
